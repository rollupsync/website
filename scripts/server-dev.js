const { createSharedBundleRenderer } = require('vue-webworker-renderer')
const fs = require('fs')
const path = require('path')
const express = require('express')
const MFS = require('memory-fs')
const webpack = require('webpack')
const clientConfig = require('../webpack.config')
const serverConfig = require('../webpack.server')

function createRenderer(bundle, options) {
  return createSharedBundleRenderer(bundle, options)
}

const template = (content, context) => `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  ${context.head || ''}
  ${context.renderResourceHints(context)}
  ${context.renderStyles(context)}
</head>
<body>
  ${content}
  ${context.renderState(context)}
  ${context.renderScripts(context)}
</body>
</html>
`

const app = express()

let renderer
const readyPromise = hotLoad(app, template, (bundle, options) => {
  renderer = createRenderer(bundle, options)
})

const serve = (_path) => express.static(path.resolve(__dirname, '..', _path))

app.use('/build', serve('../build'))

app.get('*', async (req, res) => {
  const context = {
    title: 'Hello World',
    url: req.url,
    cookie: req.headers['cookie'],
  }
  await readyPromise
  renderer.renderToString(context, (err, html) => {
    if (err) {
      console.log(err)
      res.status(500).json({
        message: 'Error rendering'
      })
    } else {
      res.send(html)
    }
  })
})

const port = 8080
app.listen(port, () => console.log(`Listening on port ${port}`))

module.exports = app

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (e) {}
}

async function hotLoad(app, template, cb) {
  let bundle
  let clientManifest

  let ready
  const readyPromise = new Promise(r => { ready = r })
  const update = () => {
    if (bundle && clientManifest) {
      ready()
      cb(bundle, {
        template,
        clientManifest
      })
    }
  }

  // modify client config to work with hot middleware
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  })
  app.use(devMiddleware)
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
    update()
  })

  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }))

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = eval(readFile(mfs, 'server-bundle.js')).default
    update()
  })

  return readyPromise
}
